# Super Grub Disk Main Configuration file
# Copyright (C) 2009  Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

insmod biosdisk
insmod part_acorn
insmod part_amiga
insmod part_apple
insmod part_gpt
insmod part_msdos
insmod part_sun

# Prepare environment variables, needed mostly for update_paths()
export prefix_device prefix_path script_path script_prefix prefix_uuid
regexp -s prefix_device '^\((.*)\)/' "$prefix"
regexp -s prefix_path '^\(.*\)/(.*)$' "$prefix"
probe --fs-uuid --set=prefix_uuid "$prefix_device"

# With grub-mkrescue, modules are stored in an architecture specific path
# like "(hd0)/boot/grub/i386-pc" while scripts are generally stored in just
# "(hd0)/boot/grub/". The following command sets script_path by stripping
# away the arch specific part of prefix_path.
regexp -s script_path '^(.*/grub/).*$' "$prefix_path"

set script_prefix="($prefix_device)/$script_path"
# Define a function for updating paths when device names change.
# search.mod is required for update-paths, and must be loaded before device
# names change because $prefix will be invalid.

insmod search

function update_paths {
  search --fs-uuid --set=prefix_device $prefix_uuid
  prefix="($prefix_device)/$prefix_path"
  script_prefix="($prefix_device)/$script_path"
}



# Timeout for menu
#set timeout=10

# Set default boot entry as Entry 0
set default=0

# Entry 0 - Load osdetect lua script as a new menu
menuentry "Detect any OS" {
 configfile $script_prefix/osdetect.lua
}

# Entry 1 - Load cfgdetect lua script as a new menu
menuentry "Detect any GRUB2 configuration file (grub.cfg)" {
 configfile $script_prefix/cfgdetect.cfg
}

# Entry 2 - Load grubdetect lua script as a new menu
menuentry "Detect any GRUB2 installation (even if mbr is overwritten)" {
  configfile $script_prefix/grubdetect.lua
}

# Entry 3 - Load isodetect lua script as a new menu
menuentry "Detect loop bootable isos (in /boot-isos or /boot/boot-isos)" {
  configfile $script_prefix/isodetect.lua
}

# Entry 4
menuentry "Enable GRUB2's LVM support" {
  insmod lvm
}

# Entry 5
menuentry "Enable GRUB2's RAID support" {
  insmod raid
  insmod mdraid
  insmod raid5rec
  insmod raid6rec
  insmod dm_nv
}

# Entry 6
menuentry "Enable GRUB2's PATA support (to work around BIOS bugs/limitations)" {
  insmod ata
  update_paths
}

# Entry 7
menuentry "Enable GRUB2's USB support *experimental*" {
  insmod ohci
  insmod uhci
  insmod usbms
  update_paths
}

# Entry 8
menuentry "Enable serial terminal" {
  serial
  terminal_input console serial
  terminal_output console serial
}

# Entry 9
menuentry "List devices/partitions" {
  # Set pager=1 so ls output doesn't scroll past the top of the screen
  # but restore $pager to its previous value when finished
  set oldpager="${pager}"
  set pager=1

  ls -l

  set pager="${oldpager}"
  unset oldpager
}
