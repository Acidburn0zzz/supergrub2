# Super Grub Disk Main Configuration file
# Copyright (C) 2009  Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

insmod part_acorn
insmod part_amiga
insmod part_apple
insmod part_bsd
insmod part_gpt
insmod part_msdos
insmod part_sun
insmod part_sunpc

# Prepare environment variables, needed mostly for update_paths()
export prefix_device prefix_path script_path script_prefix prefix_uuid
regexp -s prefix_device '^\((.*)\)/' "$prefix"
regexp -s prefix_path '^\(.*\)/(.*)$' "$prefix"
probe --fs-uuid --set=prefix_uuid "$prefix_device"

# With grub-mkrescue, modules are stored in an architecture specific path
# like "(hd0)/boot/grub/i386-pc" while scripts are generally stored in just
# "(hd0)/boot/grub/". The following command sets script_path by stripping
# away the arch specific part of prefix_path.
regexp -s script_path '^(.*/grub/).*$' "$prefix_path"

set script_prefix="($prefix_device)/$script_path"
# Define a function for updating paths when device names change.
# search.mod is required for update-paths, and must be loaded before device
# names change because $prefix will be invalid.

  set menu_color_normal=white/brown
  set menu_color_highlight=white/blue
  set menu_color_background=yellow/cyan

insmod search

function update_paths {
  search --fs-uuid --set=prefix_device $prefix_uuid
  prefix="($prefix_device)/$prefix_path"
  script_prefix="($prefix_device)/$script_path"
}


# Load translation strings. Default to English, and source the English
# translations even if we're going to use another language, that way
# untranslated strings default back to English.

source "$script_prefix/translations/en/en_strings.cfg"
if [ -n "$lang" ]; then
  source "$script_prefix/translations/$lang/${lang}_strings.cfg"
fi

source "$script_prefix/translations_export.cfg"


# Timeout for menu
#set timeout=10

# Set default boot entry as Entry number 2 (counting from 0)
set default=2

# Get the version number for this Super GRUB2 Disk release
source "$script_prefix/version.cfg"

menuentry "               ====---==- Super Grub2 Disk $sgrub_version  -==---==== " {
  # Set pager=1 so ls output doesn't scroll past the top of the screen
  # but restore $pager to its previous value when finished
  set oldpager="${pager}"
  set pager=1

  cat /boot/grub/AUTHORS
  cat /boot/grub/COPYING

  set pager="${oldpager}"
  unset oldpager
}

menuentry "$str_language" {
  configfile /boot/grub/language_select.cfg
}

# Load osdetect script as a new menu
menuentry "$str_detect_any_os" {
 configfile $script_prefix/osdetect.cfg
}

# Load cfgdetect script as a new menu
menuentry "$str_detect_any_grub2_cfg" {
 configfile $script_prefix/cfgdetect.cfg
}

# Load grubdetect script as a new menu
menuentry "$str_detect_any_grub2_ins" {
  configfile $script_prefix/grubdetect.cfg
}

# Load autoiso script as a new menu
menuentry "$str_detect_isos" {
  configfile $script_prefix/autoiso.cfg
}

menuentry "$str_enable_lvm" {
  insmod lvm
}

menuentry "$str_enable_raid" {
  insmod raid
  insmod mdraid
  insmod raid5rec
  insmod raid6rec
  insmod dm_nv
}

menuentry "$str_enable_pata" {
  insmod ata
  update_paths
}

menuentry "$str_enable_usb" {
  insmod ohci
  insmod uhci
  insmod usbms
  update_paths
}

menuentry "$str_enable_serial" {
  serial
  terminal_input console serial
  terminal_output console serial
}

menuentry "$str_list_devices" {
  # Set pager=1 so ls output doesn't scroll past the top of the screen
  # but restore $pager to its previous value when finished
  set oldpager="${pager}"
  set pager=1

  ls -l

  set pager="${oldpager}"
  unset oldpager
}

menuentry "$str_color" {
if test "$bwcolor" = 'yes'; then
  set bwcolor=no
else
  set bwcolor=yes
fi

if test "$bwcolor" = 'yes'; then
  set menu_color_normal=white/black
  set menu_color_highlight=black/white
  set menu_color_background=black/white
else
  set menu_color_normal=white/brown
  set menu_color_highlight=white/blue
  set menu_color_background=yellow/cyan
fi

}
