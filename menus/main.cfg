# Super Grub Disk Main Configuration file
# Copyright (C) 2009  Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

# Configure gfxterm, but allow it to be disabled by holding shift during boot.
# gfxterm is required to display non-ASCII translations.
loadfont "$prefix/unifont.pf2"
if keystatus --shift; then
  disable_gfxterm=true
  # export disable_gfxterm is needed so that the setting will persist even after
  # a "configfile /boot/grub/main.cfg" (which is what language_select.cfg does after
  # you select a new language)
  export disable_gfxterm

  # The following strings are intentionally not made translateable.
  echo "It has been detected that the shift key was held down. Because of this SG2D"
  echo "will use VGA text mode rather than gfxterm. This will cause display problems"
  echo "when using some non-English translations."
  echo
  echo "Press escape to continue to the main menu"
  sleep --interruptible 9999
fi

if [ "$disable_gfxterm" != true ]; then
  insmod all_video
  gfxmode=640x480
  terminal_output --append gfxterm
fi


set menu_color_normal=white/brown
set menu_color_highlight=white/blue
set menu_color_background=yellow/cyan

# Set secondary_locale_dir to the directory containing SG2D specific mo files.
# This makes grub aware of translations for SG2D specific strings.
secondary_locale_dir="${prefix}/sgd_locale/"

insmod part_acorn
insmod part_amiga
insmod part_apple
insmod part_bsd
insmod part_gpt
insmod part_msdos
insmod part_sun
insmod part_sunpc

# Prepare environment variables, needed mostly for update_paths()
export prefix_device prefix_path prefix_uuid
regexp -s prefix_device '^\((.*)\)/' "$prefix"
regexp -s prefix_path '^\(.*\)/(.*)$' "$prefix"
probe --fs-uuid --set=prefix_uuid "$prefix_device"

# Define a function for updating paths when device names change.
# search.mod is required for update-paths, and must be loaded before device
# names change because $prefix will be invalid.
insmod search

function update_paths {
  search --fs-uuid --set=prefix_device $prefix_uuid
  prefix="($prefix_device)/$prefix_path"
}


# Timeout for menu
#set timeout=10

# Set default boot entry as Entry number 2 (counting from 0)
set default=2

# Get the version number for this Super GRUB2 Disk release
source "${prefix}/version.cfg"

menuentry "               ====---==- Super Grub2 Disk $sgrub_version  -==---==== " {
  # Set pager=1 so ls output doesn't scroll past the top of the screen
  # but restore $pager to its previous value when finished
  set oldpager="${pager}"
  set pager=1

  cat /boot/grub/AUTHORS
  cat /boot/grub/COPYING

  set pager="${oldpager}"
  unset oldpager
  echo $"Press escape to return to the main menu"
  sleep --interruptible 9999
}

menuentry $"Change language" {
  configfile "${prefix}/language_select.cfg"
}

# Load osdetect script as a new menu
menuentry $"Detect any Operating System" {
  configfile "${prefix}/osdetect.cfg"
}

# Load cfgdetect script as a new menu
menuentry $"Detect any GRUB2 configuration file (grub.cfg)" {
  configfile "${prefix}/cfgdetect.cfg"
}

# Load grubdetect script as a new menu
menuentry $"Detect any GRUB2 installation (even if mbr is overwritten)" {
  configfile "${prefix}/grubdetect.cfg"
}

# Load autoiso script as a new menu
menuentry $"Detect loop bootable isos (in /boot-isos or /boot/boot-isos)" {
  configfile "${prefix}/autoiso.cfg"
}

submenu $"Enable extra GRUB2 functionality..." {

  menuentry $"Enable GRUB2's LVM support" {
    insmod lvm
  }

  menuentry $"Enable GRUB2's RAID support" {
    insmod raid
    insmod mdraid
    insmod raid5rec
    insmod raid6rec
    insmod dm_nv
  }

  menuentry $"Enable GRUB2's PATA support (to work around BIOS bugs/limitations)" {
    insmod ata
    update_paths
  }

  menuentry $"Enable GRUB2's USB support *experimental*" {
    insmod ohci
    insmod uhci
    insmod usbms
    update_paths
  }

  menuentry $"Enable serial terminal" {
    serial
    terminal_input console serial
    terminal_output console serial
  }
}

menuentry $"List devices/partitions" {
  # Set pager=1 so ls output doesn't scroll past the top of the screen
  # but restore $pager to its previous value when finished
  set oldpager="${pager}"
  set pager=1

  ls -l

  set pager="${oldpager}"
  unset oldpager

  echo $"Press escape to return to the main menu"
  sleep --interruptible 9999
}

menuentry $"Color ON/OFF" {
  if test "$bwcolor" = 'yes'; then
    set bwcolor=no
  else
    set bwcolor=yes
  fi

  if test "$bwcolor" = 'yes'; then
    set menu_color_normal=white/black
    set menu_color_highlight=black/white
    set menu_color_background=black/white
  else
    set menu_color_normal=white/brown
    set menu_color_highlight=white/blue
    set menu_color_background=yellow/cyan
  fi

}

# If it exists, source $prefix/sgd_custom.cfg. This follows the same idea as
# grub-mkconfig generated grub.cfg files sourcing $prefix/custom.cfg, though
# it's less needed here since one could add custom code to this file directly
# whereas their distro might automatically overwrite /boot/grub/grub.cfg on
# kernel upgrades. The main motivation for adding this was the vmtest script
# which I use heavily during Super GRUB2 Disk development, but this feature
# might also be useful to others.
if [ -e "$prefix/sgd_custom.cfg" ]; then
  source "$prefix/sgd_custom.cfg"
fi
